name: pipeline

on:
  push:
    branches:
      - main
    tags:
      - v*
  pull_request:
    branches:
      - main

jobs:
  build:
    name: ${{ matrix.os }}-${{ matrix.buildtype }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      max-parallel: 8
      matrix:
        name: [windows-msvc, ubuntu-clang, macos-clang]
        buildtype: [Debug, Release]
        include:
          - name: "windows-msvc"
            os: windows-2019
            triplet: x64-windows
            vcpkg_dir: 'C:\vcpkg'
            suffix: "win-x64"
            generator: "Visual Studio 16 2019"
            arch: "-A x64"
          - name: "ubuntu-clang"
            os: ubuntu-20.04
            triplet: x64-linux
            suffix: "linux-x64"
            vcpkg_dir: "/usr/local/share/vcpkg"
            generator: "Ninja"
            arch: ""
          - name: "macos-clang"
            os: macos-10.15
            triplet: x64-osx
            suffix: "osx-x64"
            vcpkg_dir: "/usr/local/share/vcpkg"
            generator: "Ninja"
            arch: ""

    steps:
      - name: Checkout
        uses: actions/checkout@v1
        with:
          submodules: true

      # - name: Cache macos installed tools
      #   if: runner.os == 'macOS'
      #   uses: actions/cache@v2
      #   with:
      #     path: '/usr/local/Cellar'
      #     key: macos-installed-tools
      #     restore-keys: |
      #       macos-installed-tools

      - name: Install Tools
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-add-repository universe
            sudo apt-get update
            sudo apt-get install graphviz -y
            sudo apt-get install doxygen -y
            sudo apt-get install ninja-build -y
            sudo apt-get install -y clang-tidy
            sudo apt-get install -y clang-format
            clang-format --version
            clang-tidy --version
            llvm-cov-12 --version
          elif [ "$RUNNER_OS" == "Windows" ]; then
            # choco upgrade doxygen.install ninja llvm ccache cppcheck
            echo "no needs to install any tools in windows"
          elif [ "$RUNNER_OS" == "macOS" ]; then
            brew install ninja
            # ln -s "/usr/local/opt/llvm/bin/clang-format" "/usr/local/bin/clang-format"
            ln -s "/usr/local/opt/llvm/bin/clang-tidy" "/usr/local/bin/clang-tidy"
            # clang-format --version
            clang-tidy --version
            # brew install graphviz
            # brew install doxygen
          else
            echo "$RUNNER_OS not supported"
            exit 1
          fi

      #      # Enable this if you want specific version of vcpkg
      #      # For example tag "2020.06"
      #      - name: Configure Vcpkg
      #        shell: bash
      #        run: |
      #          cd ${{ matrix.vcpkg_dir }}
      #          git fetch origin --tags
      #          git reset --hard 2020.06
      #          if [ "$RUNNER_OS" == "Windows" ]; then
      #            ./bootstrap-vcpkg.bat
      #          else
      #            ./bootstrap-vcpkg.sh
      #          fi

      - name: Cache vcpkg
        uses: actions/cache@v2
        with:
          path: "${{ matrix.vcpkg_dir }}/installed"
          key: vcpkg-${{ matrix.triplet }}-${{ hashFiles('vcpkg.txt') }}
          restore-keys: |
            vcpkg-${{ matrix.triplet }}-${{ hashFiles('vcpkg.txt') }}
            vcpkg-${{ matrix.triplet }}-
            vcpkg-

      - name: Install vcpkg packages
        shell: bash
        run: |
          vcpkg install --triplet ${{ matrix.triplet }} $(cat vcpkg.txt)

      - name: Configure
        shell: bash
        run: |
          mkdir build
          mkdir install
          SANITIZER="Address"
          if [ "$RUNNER_OS" == "Windows" ]; then
            if [ "${{ matrix.buildtype }}" == "Release" ]; then
              SANITIZER=
            fi
            cmake \
            --log-context \
            --log-level=VERBOSE \
            -S. -Bbuild \
            -G "${{ matrix.generator }}" ${{ matrix.arch }} \
            -DCMAKE_INSTALL_PREFIX="install" \
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_BUILD_TYPE=${{ matrix.buildtype }} \
            -DWARNINGS_AS_ERRORS=ON \
            -DUSE_WIN_MULTI_THREAD_DLL=ON \
            -DENABLE_TEST=ON \
            -DENABLE_EXAMPLE=ON \
            -DUSE_SANITIZER="${SANITIZER}" \
            -DCMAKE_TOOLCHAIN_FILE="${{ matrix.vcpkg_dir }}/scripts/buildsystems/vcpkg.cmake"
          else
            if [ "$RUNNER_OS" == "Linux" ]; then
              export CC=/usr/bin/clang-12
              export CPP=/usr/bin/clang-cpp-12
              export CXX=/usr/bin/clang++-12
              export LD=/usr/bin/ld.lld-12
            fi
            if [ "${{ matrix.buildtype }}" == "Debug" ]; then
              SANITIZER=
            fi
            if [ "$RUNNER_OS" == "macOS" ]; then
              cmake \
              --log-context \
              --log-level=VERBOSE \
              -S. -Bbuild \
              -G "${{ matrix.generator }}" ${{ matrix.arch }} \
              -DCMAKE_INSTALL_PREFIX="install" \
              -DBUILD_SHARED_LIBS=OFF \
              -DCMAKE_BUILD_TYPE=${{ matrix.buildtype }} \
              -DWARNINGS_AS_ERRORS=ON \
              -DUSE_WIN_MULTI_THREAD_DLL=ON \
              -DENABLE_TEST=ON \
              -DENABLE_EXAMPLE=ON \
              -DUSE_SANITIZER="${SANITIZER}" \
              -DCMAKE_TOOLCHAIN_FILE="${{ matrix.vcpkg_dir }}/scripts/buildsystems/vcpkg.cmake"
            else
              cmake \
              --log-context \
              --log-level=VERBOSE \
              -S. -Bbuild \
              -G "${{ matrix.generator }}" ${{ matrix.arch }} \
              -DCMAKE_INSTALL_PREFIX="install" \
              -DBUILD_SHARED_LIBS=OFF \
              -DCMAKE_BUILD_TYPE=${{ matrix.buildtype }} \
              -DWARNINGS_AS_ERRORS=ON \
              -DCODE_COVERAGE=ON \
              -DUSE_WIN_MULTI_THREAD_DLL=ON \
              -DENABLE_CLANG_TIDY=ON \
              -DENABLE_CLANG_FORMAT=ON \
              -DENABLE_TEST=ON \
              -DENABLE_EXAMPLE=ON \
              -DENABLE_DOXYGEN=ON \
              -DUSE_SANITIZER="${SANITIZER}" \
              -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
              -DCMAKE_TOOLCHAIN_FILE="${{ matrix.vcpkg_dir }}/scripts/buildsystems/vcpkg.cmake"
            fi
          fi

      - name: Compile
        shell: bash
        run: |
          cmake --build ./build --config ${{ matrix.buildtype }} -j4 --

      - name: GenDoc
        if: runner.os == 'Linux'
        shell: bash
        run: |
          cmake --build ./build --config ${{ matrix.buildtype }} --target doc -j4 --

      - name: ClangFormat
        if: runner.os == 'Linux'
        shell: bash
        run: |
          cmake --build ./build --config ${{ matrix.buildtype }} --target clang-format -j4 --

      - name: CodeCov
        if: runner.os == 'Linux'
        shell: bash
        run: |
          cmake --build ./build --config ${{ matrix.buildtype }}  --target ccov-all-report -j4 --

      # code cov already ran the ctest
      # - name: Tests
      #   shell: bash
      #   run: cd build && ctest -C ${{ matrix.buildtype }} --verbose

      # - name: List runtime dependencies
      #   shell: bash
      #   run: |
      #     if [ "$RUNNER_OS" == "Linux" ]; then
      #       ldd ./install/bin/example
      #     elif [ "$RUNNER_OS" == "macOS" ]; then
      #       otool -L ./install/bin/example
      #     fi

      - name: Package
        id: create_artifact
        if: startsWith(github.ref, 'refs/tags/v')
        shell: bash
        run: |
          cmake --build ./build --config ${{ matrix.buildtype }} --target install -j4 --
          mkdir release
          if [ "$RUNNER_OS" == "Windows" ]; then
            ls ./install
            7z a -r quicplus.zip ./install/*
          else
            cd ./install
            zip -r ./../quicplus.zip *
            cd ..
          fi
          name=quic_plus_${{ matrix.suffix }}_${{ matrix.buildtype }}_$(git describe --always).zip
          mv -v ./quicplus.zip release/${name}
          echo "::set-output name=name::${name}"
          echo "::set-output name=path::release/${name}"

      - name: Upload artifacts
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v1
        with:
          name: Release
          path: release

      - name: Create Changelog
        id: create_changelog
        if: startsWith(github.ref, 'refs/tags/v')
        shell: bash
        run: |
          last_tag=$(git describe --tags --abbrev=0 @^ || true)
          if [ -z "$last_tag" ]; then
            git log --oneline --format="%C(auto) %h %s" > changelog.txt
          else
            git log --oneline --format="%C(auto) %h %s" ${last_tag}..@ > changelog.txt
          fi
          cat changelog.txt

      - name: Release
        uses: ncipollo/release-action@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          artifacts: ${{ steps.create_artifact.outputs.path }}
          allowUpdates: true
          artifactContentType: application/zip
          bodyFile: changelog.txt
          draft: false
          omitBodyDuringUpdate: true
          omitNameDuringUpdate: true
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
